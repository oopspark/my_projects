graph:
  - name: bar
    purpose: Compare values of categorical data
    data:
      subjects: [Korean, Math, English, Science, History, PE, Music]
      scores: [82, 95, 78, 88, 76, 91, 85]
    python_example:
      - |
        import numpy as np
        import matplotlib.pyplot as plt

        subjects = ['Korean', 'Math', 'English', 'Science', 'History', 'PE', 'Music']
        scores = np.random.randint(60, 100, size=len(subjects))  # 또는 [82, 95, 78, 88, 76, 91, 85]

        plt.figure(figsize=(10, 6))
        bars = plt.bar(subjects, scores, color='skyblue')

        for bar in bars:
            yval = bar.get_height()
            plt.text(bar.get_x() + bar.get_width() / 2, yval + 1, f'{yval}', ha='center', va='bottom')

        plt.title('Scores by Subject')
        plt.xlabel('Subjects')
        plt.ylabel('Scores')
        plt.ylim(0, 110)
        plt.grid(axis='y', linestyle='--', alpha=0.7)
        plt.tight_layout()
        plt.show()

        

  - name: stacked
    purpose: Compare multiple groups cumulatively
    data:
      departments: [Sales, Marketing, Development, Design]
      men: [12, 9, 15, 7]
      women: [8, 11, 10, 13]
    python_example:
      - |
        import numpy as np
        departments = ['Sales', 'Marketing', 'Development', 'Design']
        men = np.random.randint(5, 20, size=len(departments))
        women = np.random.randint(5, 20, size=len(departments))

  - name: histogram
    purpose: Visualize distribution of continuous data
    data:
      scores: [56, 67, 62, 74, 80, 45, 89, 91, 55, 68, 72, 60, 70, 77, 58]
    python_example:
      - |
        import numpy as np
        scores = np.random.normal(loc=70, scale=10, size=100)

  - name: line
    purpose: Track changes over time
    data:
      months: [Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec]
      sales: [120, 135, 150, 140, 160, 170, 180, 175, 165, 155, 145, 130]
    python_example:
      - |
        import numpy as np
        months = [f"{i}월" for i in range(1, 13)]
        sales = np.random.randint(100, 200, size=12)

  - name: scatter
    purpose: Understand correlation between two variables
    data:
      study_hours: [1, 2, 3, 4, 5, 6, 7]
      scores: [45, 50, 60, 65, 75, 85, 90]
    python_example:
      - |
        import numpy as np
        study_hours = np.arange(1, 21)
        scores = study_hours * 5 + np.random.normal(0, 5, size=20)

  - name: box
    purpose: Show median, quartiles, and outliers of data distribution
    data:
      class_A: [65, 70, 72, 75, 80, 90, 100]
      class_B: [60, 63, 66, 69, 72, 75, 78]
      class_C: [55, 58, 62, 66, 70, 74, 78]
    python_example:
      - |
        import numpy as np
        class_A = np.random.normal(75, 10, size=50)
        class_B = np.random.normal(70, 8, size=50)
        class_C = np.random.normal(65, 12, size=50)

  - name: pie
    purpose: Show proportion of parts to a whole
    data:
      categories: [Laptop, Tablet, Desktop, Smartphone]
      ratios: [25, 15, 10, 50]
    python_example:
      - |
        import numpy as np
        categories = ['Laptop', 'Tablet', 'Desktop', 'Smartphone']
        ratios = np.random.dirichlet(np.ones(len(categories)), size=1)[0] * 100

  - name: heat
    purpose: Visualize correlation or grid data
    data:
      varA: [1.0, 0.6, -0.3]
      varB: [0.6, 1.0, 0.1]
      varC: [-0.3, 0.1, 1.0]
    python_example:
      - |
        import numpy as np
        corr_matrix = np.random.uniform(-1, 1, (5,5))
        np.fill_diagonal(corr_matrix, 1)

  - name: area
    purpose: Visualize cumulative or continuous changes
    data:
      months: [1, 2, 3, 4, 5, 6]
      visitors: [300, 450, 500, 480, 520, 600]
    python_example:
      - |
        import numpy as np
        months = np.arange(1, 13)
        visitors = np.cumsum(np.random.randint(10, 50, size=12))

  - name: violin
    purpose: Show distribution with density
    data:
      group_A: [60, 65, 70, 75, 80, 85, 90]
      group_B: [55, 60, 65, 70, 75, 80, 85]
    python_example:
      - |
        import numpy as np
        group_A = np.random.normal(70, 15, 100)
        group_B = np.random.normal(65, 20, 100)

  - name: pair
    purpose: Visualize relationships among multiple variables
    data:
      sepal_length: [5.1, 4.9, 5.8, 6.0]
      sepal_width: [3.5, 3.0, 2.6, 2.9]
      petal_length: [1.4, 1.3, 3.8, 4.2]
      petal_width: [0.2, 0.2, 1.2, 1.5]
    python_example:
      - |
        import seaborn as sns
        iris = sns.load_dataset('iris')

  - name: density
    purpose: Smoothly visualize data distribution using probability density function
    data:
      values: [52, 55, 57, 60, 63, 65, 67, 70, 72, 75, 78, 80, 82, 85]
    python_example:
      - |
        import numpy as np
        import seaborn as sns
        data = np.random.normal(0, 1, 1000)
        sns.kdeplot(data)

  - name: bubble
    purpose: Scatter plot with bubble size representing a third dimension
    data:
      x: [5, 10, 15, 20]
      y: [50, 60, 70, 80]
      size: [100, 200, 150, 300]
    python_example:
      - |
        import numpy as np
        x = np.random.rand(30) * 100
        y = np.random.rand(30) * 100
        size = np.random.rand(30) * 1000

  - name: spider
    purpose: Compare characteristics across categories
    data:
      categories: [Strength, Intelligence, Speed, Luck, Stamina]
      user_A: [80, 65, 90, 70, 85]
      user_B: [60, 75, 80, 60, 90]
    python_example:
      - |
        import numpy as np
        categories = ['Strength', 'Intelligence', 'Speed', 'Luck', 'Stamina']
        user_A = np.random.randint(50, 100, len(categories))
        user_B = np.random.randint(50, 100, len(categories))

  - name: treemap
    purpose: Represent hierarchical data with areas
    data:
      categories: [Electronics, Clothing, Food, Sports]
      values: [500, 300, 200, 150]
    python_example:
      - |
        import numpy as np
        categories = ['Electronics', 'Clothing', 'Food', 'Sports']
        values = np.random.randint(100, 1000, len(categories))

  - name: event
    purpose: Visualize milestones or events at specific times
    data:
      dates: ["2023-01-10", "2023-02-01", "2023-03-15", "2023-04-01", "2023-05-20"]
      events: ["Planning start", "Design complete", "Development start", "Testing complete", "Service launch"]
    python_example: |
      import random
      import datetime

      base_date = datetime.date(2023, 1, 1)
      events = ['Planning start', 'Design complete', 'Development start', 'Testing complete', 'Service launch']
      dates = [(base_date + datetime.timedelta(days=random.randint(0, 150))).isoformat() for _ in events]
      timeline = list(zip(dates, events))
      timeline.sort()

      for date, event in timeline:
          print(f"{date}: {event}")

  - name: duration
    purpose: Visualize continuous time intervals with start and end dates
    data:
      tasks: ["Planning", "Design", "Frontend Development", "Backend Development", "Testing", "Release Preparation"]
      start_dates: ["2023-01-01", "2023-01-15", "2023-02-01", "2023-02-10", "2023-03-01", "2023-03-20"]
      end_dates: ["2023-01-14", "2023-01-31", "2023-02-20", "2023-02-28", "2023-03-15", "2023-03-31"]
    python_example: |
      import datetime

      tasks = ['Planning', 'Design', 'Frontend Development', 'Backend Development', 'Testing', 'Release Preparation']
      start_dates = [
          datetime.date(2023, 1, 1),
          datetime.date(2023, 1, 15),
          datetime.date(2023, 2, 1),
          datetime.date(2023, 2, 10),
          datetime.date(2023, 3, 1),
          datetime.date(2023, 3, 20),
      ]
      durations = [14, 16, 19, 18, 14, 11]

      schedule = []
      for task, start, duration in zip(tasks, start_dates, durations):
          end = start + datetime.timedelta(days=duration)
          schedule.append((task, start.isoformat(), end.isoformat()))

      for task, start, end in schedule:
          print(f"{task}: {start} ~ {end}")

  - name: chord
    purpose: Visualize connections among multiple items
    data:
      source: [A, B, C, D]
      target: [B, C, D, A]
      weights: [10, 5, 8, 6]
    python_example:
      - |
        sources = ['A', 'B', 'C', 'D']
        targets = ['B', 'C', 'D', 'A']
        weights = np.random.randint(1, 20, len(sources))

  - name: sankey
    purpose: Represent flows, splits, and losses by width
    data:
      source: ["Customer Entry", "Customer Entry", "Advertisement", "Advertisement", "Website Visit", "Website Visit", "Cart", "Cart"]
      target: ["Advertisement", "Website Visit", "Cart", "Drop-off", "Cart", "Drop-off", "Purchase Complete", "Drop-off"]
      values: [500, 300, 200, 100, 250, 50, 180, 70]
    python_example: |
      import numpy as np
      import pandas as pd

      source = ['Customer Entry', 'Customer Entry', 'Advertisement', 'Advertisement', 'Website Visit', 'Website Visit', 'Cart', 'Cart']
      target = ['Advertisement', 'Website Visit', 'Cart', 'Drop-off', 'Cart', 'Drop-off', 'Purchase Complete', 'Drop-off']

      np.random.seed(42)
      values = [
          500, 300,
          np.random.randint(150, 250), np.random.randint(80, 120),
          np.random.randint(200, 300), np.random.randint(30, 70),
          np.random.randint(150, 200), np.random.randint(50, 100)
      ][:8]

      sankey_df = pd.DataFrame({
          'source': source,
          'target': target,
          'value': values
      })

      print(sankey_df)

  - name: network
    purpose: Visualize relationships between nodes
    data:
      nodes: [Alice, Bob, Carol, Dave]
      edges: [[Alice, Bob], [Bob, Carol], [Carol, Dave], [Alice, Dave]]
    python_example:
      - |
        import networkx as nx
        nodes = ['Alice', 'Bob', 'Carol', 'Dave']
        edges = [('Alice', 'Bob'), ('Bob', 'Carol'), ('Carol', 'Dave'), ('Alice', 'Dave')]
        G = nx.Graph()
        G.add_nodes_from(nodes)
        G.add_edges_from(edges)

  - name: icicle
    purpose: Visualize hierarchical structure vertically
    data:
      names: [Total, Electronics, Stationery, Smartphone, Laptop]
      parents: ["", Total, Total, Electronics, Electronics]
    python_example:
      - |
        names = ['Total', 'Electronics', 'Stationery', 'Smartphone', 'Laptop']
        parents = ['', 'Total', 'Total', 'Electronics', 'Electronics']

  - name: parallel
    purpose: Compare features of high-dimensional data
    data:
      feature1: [1.2, 2.4, 1.8]
      feature2: [3.5, 2.8, 4.0]
      feature3: [5.1, 4.9, 4.5]
      label: [A, B, A]
    python_example:
      - |
        import pandas as pd
        data = pd.DataFrame({
            'feature1': np.random.rand(50),
            'feature2': np.random.rand(50),
            'feature3': np.random.rand(50),
            'label': np.random.choice(['A', 'B'], 50)
        })

  - name: surface
    purpose: Visualize 3D functions or terrains
    data:
      x: [0, 1, 2]
      y: [0, 1, 2]
      z:
        - [1, 2, 3]
        - [4, 5, 6]
        - [7, 8, 9]
    python_example:
      - |
        import numpy as np
        x = np.linspace(-5, 5, 30)
        y = np.linspace(-5, 5, 30)
        X, Y = np.meshgrid(x, y)
        Z = np.sin(np.sqrt(X**2 + Y**2))

  - name: decision
    purpose: Represent decision branching structures
    data:
      conditions: ["Age < 30", "Income > 3000", "Marital Status"]
      results: ["Loan Denied", "Loan Approved", "Further Check"]
    python_example:
      - |
        conditions = ["Age < 30", "Income > 3000", "Marital Status"]
        results = ["Loan Denied", "Loan Approved", "Further Check"]

  - name: confuse
    purpose: Check classification model accuracy and errors
    data:
      actual: [Cat, Dog, Cat, Rabbit, Rabbit]
      predicted: [Cat, Cat, Cat, Rabbit, Dog]
    python_example:
      - |
        actual = ['Cat', 'Dog', 'Cat', 'Rabbit', 'Rabbit']
        predicted = ['Cat', 'Cat', 'Cat', 'Rabbit', 'Dog']

  - name: stream
    purpose: Visualize cumulative flow over time
    data:
      dates: [2023-01, 2023-02, 2023-03, 2023-04]
      A: [10, 12, 15, 13]
      B: [5, 6, 8, 10]
    python_example:
      - |
        import pandas as pd
        import numpy as np
        dates = pd.date_range(start='2023-01-01', periods=12, freq='M')
        A = np.random.randint(5, 15, 12)
        B = np.random.randint(3, 10, 12)

  - name: decomposition
    purpose: Analyze components of time series data (trend, seasonality, residual)
    data:
      dates: [2023-01-01, 2023-01-02, 2023-01-03, 2023-01-04]
      observations: [150, 155, 160, 162]
    python_example:
      - |
        import pandas as pd
        import numpy as np
        dates = pd.date_range(start='2023-01-01', periods=100)
        trend = np.linspace(100, 200, 100)
        season = 10 * np.sin(np.linspace(0, 3.14*4, 100))
        residual = np.random.normal(0, 5, 100)
        observations = trend + season + residual
